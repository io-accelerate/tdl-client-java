apply plugin: 'java'

//~~~~ Settings for Gradle
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.8"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}

//~~~~ Settings for the source code
sourceCompatibility = 1.8
name = 'tdl-client-java'
group = 'ro.ghionoiu'
version = releaseVersion

repositories {
    mavenCentral()
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.activemq:activemq-client:5.11.1'

    testCompile ('junit:junit:4.12') {
        exclude module : 'hamcrest-core'
    }
    testCompile ('org.mockito:mockito-core:1.10.19') {
        exclude module : 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.github.stefanbirkner:system-rules:1.11.0'
}


//~~~~~ For coverage
apply plugin: "net.saliman.cobertura"
apply plugin: 'com.github.kt3k.coveralls'

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIncludes = ['.*competition.client.*']
    coverageIgnores = ['.*org.slf4j.Logger.*']
}
test.finalizedBy(project.tasks.cobertura)


//~~~~ DEBT: This is a library the executable code should move to examples
apply plugin: 'application'
mainClassName = 'competition.example.AddNumbersExample'
applicationDefaultJvmArgs = ["-Dlogback.configurationFile=logback.xml"]

run {
    standardInput = System.in
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

//~~~~~ Making the library deployable

/**
 * Prerequisites
 *    - Create package in Bintray
 *
 * Now you can use regular maven upload to push files to you package.
 * The version will be created automatically
 *
 * To push to Maven Central use Bintray sync features:
 *    - Created request for jcenter ( response comes in a day )
 */
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

private String readSystem(String property) {
    System.getenv(property) != null  ? System.getenv(property) : "unset"
}

uploadArchives {
    repositories {
        mavenDeployer {
            name = 'bintray-julianghionoiu-tdl-client-java'
            repository(id: 'bintray-julianghionoiu-osgb36-tdl-client-java',
                       url: 'https://api.bintray.com/maven/julianghionoiu/maven/tdl-client-java') {
                authentication(userName: readSystem("BINTRAY_USER"), password: readSystem("BINTRAY_KEY"))
            }
            pom.artifactId = 'tdl-client-java'
        }
    }
}

configurations {
    published
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Add the sourceJars to non-extractor modules
artifacts {
    published sourceJar
    published javadocJar
}

bintray {
    user = readSystem("BINTRAY_USER")
    key = readSystem("BINTRAY_KEY")

    configurations = ['published']

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload

    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'maven'
        name = 'tdl-client-java'
        desc = 'A Java client that allows users to get up to speed with the TDL system.'
        websiteUrl = 'https://github.com/julianghionoiu/tdl-client-java'
        issueTrackerUrl = 'https://github.com/julianghionoiu/tdl-client-java/issues'
        vcsUrl = 'https://github.com/julianghionoiu/tdl-client-java'
        licenses = ['GPL-3.0']
        labels = ['activemq-client', 'kata']
        publicDownloadNumbers = false

        version {
            name = releaseVersion //Bintray logical version name
            vcsTag = 'v'+releaseVersion

            //Configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }

            //Configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = 'userToken' //OSS user token
//                password = 'paasword' //OSS user password
            }
        }
    }
}