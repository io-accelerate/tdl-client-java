apply plugin: 'java'

//~~~~ Settings for Gradle
buildscript {
    repositories {
        mavenCentral()
    }
}

//~~~~ Settings for the source code
sourceCompatibility = 1.8
group = 'ro.ghionoiu'


//~~~~~~ Compute versions
//DEBT: Should move this into a separate Gradle file

class Version {
    int major
    int minor
    int patch

    Version(int major, int minor, int patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    static Version fromString(versionString) {
        def (String major, String minor, String patch) = versionString.tokenize( '.' )
        new Version(major.toInteger(),
                    minor.isNumber() ? minor.toInteger() : 0,
                    patch.toInteger())
    }

    boolean higherThan(Version otherVersion) {
        if (this.major > otherVersion.major) {
            return true
        } else
        if (this.minor > otherVersion.minor) {
            return true
        } else {
            return this.patch > otherVersion.patch
        }
    }

    Version increment() {
        new Version(this.major, this.minor, this.patch +1)
    }

    String toString() {
        major+"."+minor+"."+patch
    }
}

// Get Spec version from Git
def specFolder = file("${projectDir}/src/test/resources/acceptance")
def git_describe_process = ['sh', '-c', "git --git-dir ${specFolder}/.git describe --all"]
        .execute()

def sout = new StringBuffer(), serr = new StringBuffer()
git_describe_process.consumeProcessOutput(sout, serr)
git_describe_process.waitForOrKill(1000)

def majorMinorVersion = '0.0'
if (git_describe_process.exitValue() == 0 ) {
    majorMinorVersion = sout.toString().split('v')[1]
} else {
    logger.warn('Failed to retrieve Spec version from git describe. Setting version to 0.0')
}

// Compute next version
ext.previousVersionObj = Version.fromString(previousVersion)
def newSpecVersionObj = Version.fromString(majorMinorVersion+".0")
if (newSpecVersionObj.higherThan(ext.previousVersionObj)) {
    ext.currentVersionObj = newSpecVersionObj
} else {
    ext.currentVersionObj = ext.previousVersionObj.increment()
}

version = currentVersionObj.toString()


//~~~~ Setup the dependencies

repositories {
    mavenCentral()
}


ext.libraries = [
    cucumber: [
       'info.cukes:cucumber-java:1.2.4',
       'info.cukes:cucumber-junit:1.2.4',
       'info.cukes:cucumber-picocontainer:1.2.4',
    ]
]

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.activemq:activemq-client:5.11.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.mashape.unirest:unirest-java:1.4.9'

    testCompile libraries.cucumber
    testCompile 'org.apache.httpcomponents:httpclient:4.5'
    testCompile ('junit:junit:4.12') {
        exclude module : 'hamcrest-core'
    }
    testCompile ('org.mockito:mockito-core:1.10.19') {
        exclude module : 'hamcrest-core'
    }
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'net.trajano.commons:commons-testing:1.0.1'
    testCompile 'com.github.stefanbirkner:system-rules:1.11.0'
}

//~~~~~ Making the library deployable

/**
 * Prerequisites
 *    - Create package in Bintray
 *
 * Now you can use regular maven upload to push files to you package.
 * The version will be created automatically
 *
 * To push to Maven Central use Bintray sync features:
 *    - Created request for jcenter ( if missing )
 *    - Manually sync the two repos
 *
 * To publish new version use the Bintray UI:
 *    - publish current artifacts
 *    - sync with Maven Central
 */
apply plugin: 'maven'

private String readSystem(String property) {
    System.getenv(property) != null  ? System.getenv(property) : "unset"
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task printPreviousVersion {
    doLast {
        println project.previousVersionObj.toString()
    }
}

task printVersionInformation {
    doLast {
        println "PREVIOUS_VERSION = "+project.previousVersionObj.toString()
        println "CURRENT_VERSION = "+project.currentVersionObj.toString()
    }
}

// Add the sourceJars to non-extractor modules
artifacts {
    archives sourceJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        name = 'bintray-julianghionoiu-tdl-client-java'
//      Publish to local repo then upload artifact to Maven Central's staging repo
        repository(url: "file:///Users/julianghionoiu/.m2/repository")

        pom.project {
            name 'Java client for TDL system'
            description 'A Java client that allows users to get up to speed with the TDL system.'
            url 'https://github.com/julianghionoiu/tdl-client-java'

            developers {
                developer {
                    name 'Iulian (Julian) Ghionoiu'
                    email 'iulian.ghionoiu@gmail.com'
                    organization 'Iulian Ghionoiu'
                    organizationUrl 'https://github.com/julianghionoiu'
                }
            }

            scm {
                connection 'scm:git:git@github.com:julianghionoiu/tdl-client-java.git'
                developerConnection 'scm:git:git@github.com:julianghionoiu/tdl-client-java.git'
                url 'git@github.com:julianghionoiu/tdl-client-java.git'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
        }
    }
}
